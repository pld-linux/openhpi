--- openhpi-0.6.0/acinclude.m4.orig	2004-03-27 13:18:35.000000000 +0100
+++ openhpi-0.6.0/acinclude.m4	2004-03-27 13:24:22.992299944 +0100
@@ -163,6 +163,7 @@
 			    	print "OK"; \
 				} \
 			}
+			if ( $[2] > $2 ) { print "OK"; }
 		}
 
 	}'` \
--- openhpi-0.6.0/plugins/ipmi/ipmi.c.orig	2004-03-15 02:52:47.000000000 +0100
+++ openhpi-0.6.0/plugins/ipmi/ipmi.c	2004-03-27 13:42:01.471386664 +0100
@@ -85,7 +85,7 @@
 	ipmi_handler->SDRs_read_done = 0;
         ipmi_handler->SELs_read_done = 0;
 	
-	sel_alloc_selector(&ui_sel);
+	sel_alloc_selector(&ipmi_ui_cb_handlers, &ui_sel);
 	ipmi_init(&ipmi_ui_cb_handlers);
 	
 	if (strcmp(name, "smi") == 0) {
@@ -449,7 +449,7 @@
 {
         struct ohoi_resource_id *ohoi_res_id;
 	struct oh_handler_state *handler = (struct oh_handler_state *)hnd;
-        ipmi_event_t event;
+        ipmi_event_t *event;
 
         ohoi_res_id = oh_get_resource_data(handler->rptcache, id);
         if (ohoi_res_id->type != OHOI_RESOURCE_MC) {
@@ -462,7 +462,7 @@
         case SAHPI_OLDEST_ENTRY:
 		ohoi_get_sel_first_entry(ohoi_res_id->u.mc_id, &event);
                 
-		ohoi_get_sel_next_recid(ohoi_res_id->u.mc_id, &event, next);
+		ohoi_get_sel_next_recid(ohoi_res_id->u.mc_id, event, next);
 		
                 *prev = SAHPI_NO_MORE_ENTRIES;
                 break;
@@ -472,22 +472,22 @@
 
                 *next = SAHPI_NO_MORE_ENTRIES;
 
-                ohoi_get_sel_prev_recid(ohoi_res_id->u.mc_id, &event, prev);
+                ohoi_get_sel_prev_recid(ohoi_res_id->u.mc_id, event, prev);
                 break;
                 
         default:                		
 		/* get the entry requested by id */
 		ohoi_get_sel_by_recid(ohoi_res_id->u.mc_id, *next, &event);
 
-		ohoi_get_sel_next_recid(ohoi_res_id->u.mc_id, &event, next);
+		ohoi_get_sel_next_recid(ohoi_res_id->u.mc_id, event, next);
 
-                ohoi_get_sel_prev_recid(ohoi_res_id->u.mc_id, &event, prev);
+                ohoi_get_sel_prev_recid(ohoi_res_id->u.mc_id, event, prev);
                 break; 
 	}
         entry->Event.EventType = SAHPI_ET_USER;
         memcpy(&entry->Event.EventDataUnion.UserEvent.UserEventData[3],
-               event.data, 
-               sizeof(event.data));	
+               ipmi_event_get_data_ptr(event), 
+               ipmi_event_get_data_len(event));	
 
 	return 0;		
 }
--- openhpi-0.6.0/plugins/ipmi/ipmi.h.orig	2004-03-15 02:52:47.000000000 +0100
+++ openhpi-0.6.0/plugins/ipmi/ipmi.h	2004-03-27 13:42:51.347804296 +0100
@@ -31,6 +31,7 @@
 #include <OpenIPMI/ipmi_int.h>
 #include <OpenIPMI/os_handler.h>
 #include <OpenIPMI/ipmi_domain.h>
+#include <OpenIPMI/ipmi_event.h>
 
 #include <SaHpi.h>
 #include <openhpi.h>
@@ -79,15 +80,15 @@
 void ohoi_get_sel_overflow(ipmi_mcid_t mc_id, char *overflow);
 void ohoi_get_sel_support_del(ipmi_mcid_t mc_id, char *support_del);
 SaErrorT ohoi_clear_sel(ipmi_mcid_t mc_id);
-void ohoi_get_sel_first_entry(ipmi_mcid_t mc_id, ipmi_event_t *event);
-void ohoi_get_sel_last_entry(ipmi_mcid_t mc_id, ipmi_event_t *event);
+void ohoi_get_sel_first_entry(ipmi_mcid_t mc_id, ipmi_event_t **event);
+void ohoi_get_sel_last_entry(ipmi_mcid_t mc_id, ipmi_event_t **event);
 void ohoi_get_sel_next_recid(ipmi_mcid_t mc_id, 
-                             const ipmi_event_t *event,
+                             ipmi_event_t *event,
                              unsigned int *record_id);
 void ohoi_get_sel_prev_recid(ipmi_mcid_t mc_id, 
-                             const ipmi_event_t *event, 
+                             ipmi_event_t *event, 
                              unsigned int *record_id);
-void ohoi_get_sel_by_recid(ipmi_mcid_t mc_id, SaHpiSelEntryIdT entry_id, ipmi_event_t *event);
+void ohoi_get_sel_by_recid(ipmi_mcid_t mc_id, SaHpiSelEntryIdT entry_id, ipmi_event_t **event);
 
 /* This is used to help plug-in to find resource in rptcache by entity_id */
 SaHpiRptEntryT *ohoi_get_resource_by_entityid(RPTable                *table,
--- openhpi-0.6.0/plugins/ipmi/ipmi_entity_event.c.orig	2004-03-15 02:52:47.000000000 +0100
+++ openhpi-0.6.0/plugins/ipmi/ipmi_entity_event.c	2004-03-27 13:43:53.399371024 +0100
@@ -44,7 +44,7 @@
 
 	/* FIXIT! */
 	if (event)
-		e->u.hpi_event.event.Timestamp = ipmi_get_uint32(event->data);
+		e->u.hpi_event.event.Timestamp = ipmi_get_uint32(ipmi_event_get_data_ptr(event));
 
 	/* Do not find the severity of hotswap event */
 	e->u.hpi_event.event.Severity = SAHPI_MAJOR;
--- openhpi-0.6.0/plugins/ipmi/ipmi_sel.c.orig	2004-03-15 02:52:47.000000000 +0100
+++ openhpi-0.6.0/plugins/ipmi/ipmi_sel.c	2004-03-27 14:02:08.658866272 +0100
@@ -196,13 +196,12 @@
 
 static void clear_sel(ipmi_mc_t *mc, void *cb_data)
 {
-        int rv;
-        ipmi_event_t event[1];
+        ipmi_event_t *event;
       
-        rv = ipmi_mc_first_event(mc, event);
-        while (!rv) {
+	event = ipmi_mc_first_event(mc);
+        while (event) {
                 ipmi_mc_del_event(mc, event, NULL, NULL);
-                rv = ipmi_mc_next_event(mc, event);
+                event = ipmi_mc_next_event(mc, event);
         }
 }
 
@@ -229,12 +228,12 @@
 
 static void get_sel_first_entry(ipmi_mc_t *mc, void *cb_data)
 {
-	ipmi_event_t *event = cb_data;
+	ipmi_event_t **event = cb_data;
 	
-	ipmi_mc_first_event(mc, event);
+	*event = ipmi_mc_first_event(mc);
 }
 
-void ohoi_get_sel_first_entry(ipmi_mcid_t mc_id, ipmi_event_t *event)
+void ohoi_get_sel_first_entry(ipmi_mcid_t mc_id, ipmi_event_t **event)
 {
 	int rv;
 	
@@ -246,12 +245,12 @@
 
 static void get_sel_last_entry(ipmi_mc_t *mc, void *cb_data)
 {
-	ipmi_event_t *event = cb_data;
+	ipmi_event_t **event = cb_data;
 	
-	ipmi_mc_last_event(mc, event);
+	*event = ipmi_mc_last_event(mc);
 }
 
-void ohoi_get_sel_last_entry(ipmi_mcid_t mc_id, ipmi_event_t *event)
+void ohoi_get_sel_last_entry(ipmi_mcid_t mc_id, ipmi_event_t **event)
 {
 	int rv;
 	
@@ -263,67 +262,85 @@
 
 static void get_sel_next_entry(ipmi_mc_t *mc, void *cb_data)
 {
-	int rv;
-	ipmi_event_t *event = cb_data;
+	ipmi_event_t **event = cb_data;
 
-	rv = ipmi_mc_next_event(mc, event);
-	if (rv)
-		event->record_id = SAHPI_NO_MORE_ENTRIES;
+	*event = ipmi_mc_next_event(mc, *event);
 }
 
 void ohoi_get_sel_next_recid(ipmi_mcid_t mc_id, 
-                             const ipmi_event_t *event,
+                             ipmi_event_t *event,
                              unsigned int *record_id)
 {
-        ipmi_event_t te;
+        ipmi_event_t *te;
 	int rv;
 
-        te = *event;
+        te = event;
 	rv = ipmi_mc_pointer_cb(mc_id, get_sel_next_entry, &te);
-	if (rv)
+	if (rv) {
 		dbg("unable to convert mcid to pointer");
-        *record_id  = te.record_id;
+		*record_id = SAHPI_NO_MORE_ENTRIES;
+		return;
+	}
+	if (te)
+		*record_id  = ipmi_event_get_record_id(te);
+	else
+		*record_id = SAHPI_NO_MORE_ENTRIES;
 }
 
 static void get_sel_prev_entry(ipmi_mc_t *mc, void *cb_data)
 {
-	int rv;
-	ipmi_event_t *event = cb_data;
+	ipmi_event_t **event = cb_data;
 
-	rv = ipmi_mc_prev_event(mc, event);
-	if (rv)
-		event->record_id = SAHPI_NO_MORE_ENTRIES;
+	*event = ipmi_mc_prev_event(mc, *event);
 }
 
 void ohoi_get_sel_prev_recid(ipmi_mcid_t mc_id, 
-                             const ipmi_event_t *event, 
+                             ipmi_event_t *event, 
                              unsigned int *record_id)
 {
-        ipmi_event_t te;
+        ipmi_event_t *te;
 	int rv;
 
-        te = *event;
+        te = event;
 	rv = ipmi_mc_pointer_cb(mc_id, get_sel_prev_entry, &te);
-	if (rv)
+	if (rv) {
 		dbg("unable to convert mcid to pointer");
-        *record_id  = te.record_id;
+		*record_id = SAHPI_NO_MORE_ENTRIES;
+		return;
+	}
+	if (te)
+		*record_id  = ipmi_event_get_record_id(te);
+	else
+		*record_id = SAHPI_NO_MORE_ENTRIES;
 }
 
+struct ohoi_get_event_by_recid_cb_data {
+	unsigned int record_id;
+	ipmi_event_t *event;
+};
+
 static void get_sel_by_recid(ipmi_mc_t *mc, void *cb_data)
 {
-	ipmi_event_t *event = cb_data;
-	
-	ipmi_mc_event_by_recid(mc, event->record_id, event);
+	struct ohoi_get_event_by_recid_cb_data *data = cb_data;
+
+	data->event = ipmi_mc_event_by_recid(mc, data->record_id);
 }
 
-void ohoi_get_sel_by_recid(ipmi_mcid_t mc_id, SaHpiSelEntryIdT entry_id, ipmi_event_t *event)
+void ohoi_get_sel_by_recid(ipmi_mcid_t mc_id, SaHpiSelEntryIdT entry_id, ipmi_event_t **event)
 {
 	int rv;
-	event->record_id = entry_id;
+	struct ohoi_get_event_by_recid_cb_data data;
+
+	data.record_id = entry_id;
+	data.event = NULL;
 
-	rv = ipmi_mc_pointer_cb(mc_id, get_sel_by_recid, event);
+	rv = ipmi_mc_pointer_cb(mc_id, get_sel_by_recid, &data);
 
-	if(rv)
+	if(rv) {
 		dbg("failed to convert mc_id to pointer");
+		*event = NULL;
+		return;
+	}
+	*event = data.event;
 }
 	
--- openhpi-0.6.0/plugins/ipmi/ipmi_sensor_event.c.orig	2004-03-15 02:52:47.000000000 +0100
+++ openhpi-0.6.0/plugins/ipmi/ipmi_sensor_event.c	2004-03-27 14:01:18.457498040 +0100
@@ -37,26 +37,31 @@
 					   SaHpiSensorEventT	*e)
 {
 	enum ohoi_event_type  type;
+	unsigned char *data;
 	
-	type = event->data[10] >> 6;
+	data = ipmi_event_get_data_ptr(event);
+	type = data[10] >> 6;
 	if (type == EVENT_DATA_2) 
-		e->Oem = (SaHpiUint32T)event->data[11]; 
+		e->Oem = data[11]; 
 	else if (type == EVENT_DATA_3)
-		e->SensorSpecific = (SaHpiUint32T)event->data[11]; 
+		e->SensorSpecific = data[11]; 
 
-	type = (event->data[10] & 0x30) >> 4;
+	type = data[10] >> 4;
 	if (type == EVENT_DATA_2)
-		e->Oem = (SaHpiUint32T)event->data[12];
+		e->Oem = data[12];
 	else if (type == EVENT_DATA_3)
-		e->SensorSpecific = (SaHpiUint32T)event->data[12];
+		e->SensorSpecific = data[12];
 }
 
 static void 
 set_discrete_sensor_event_state(ipmi_event_t		*event,
 				  SaHpiEventStateT	*state)
 {
-	enum ohoi_discrete_e e = event->data[10] & 0x7;
-
+	enum ohoi_discrete_e e;
+	unsigned char *data;
+	
+	data = ipmi_event_get_data_ptr(event);
+	e = data[10] & 0x7;
 	switch (e) {
 		case IPMI_TRANS_IDLE:
 			*state = SAHPI_ES_IDLE;
@@ -84,7 +89,9 @@
         struct oh_handler_state *handler;
 	ipmi_entity_id_t        entity_id;
         SaHpiRptEntryT          *rpt_entry;
+	unsigned char           *data;
 
+	data = ipmi_event_get_data_ptr(event);
         handler    = cb_data;
         entity_id  = ipmi_entity_convert_to_id(ipmi_sensor_get_entity(sensor));
         rpt_entry  = ohoi_get_resource_by_entityid(handler->rptcache, &entity_id);
@@ -107,17 +114,17 @@
 	e->u.hpi_event.event.Source = 0;
 	/* Do not find EventType in IPMI */
 	e->u.hpi_event.event.EventType = SAHPI_ET_SENSOR;
-	e->u.hpi_event.event.Timestamp = (SaHpiTimeT)ipmi_get_uint32(event->data);
+	e->u.hpi_event.event.Timestamp = (SaHpiTimeT)ipmi_get_uint32(data) * 1000000000;
 
 	e->u.hpi_event.event.Severity = (SaHpiSeverityT)severity;
 
 	e->u.hpi_event.event.EventDataUnion.SensorEvent.SensorNum = 0;
 	e->u.hpi_event.event.EventDataUnion.SensorEvent.SensorType = 
-		(SaHpiSensorTypeT)event->data[7];
+		data[7];
 	e->u.hpi_event.event.EventDataUnion.SensorEvent.EventCategory =
-		(SaHpiEventCategoryT)event->data[9] & 0x7f;
+		data[9] & 0x7f;
 	e->u.hpi_event.event.EventDataUnion.SensorEvent.Assertion = 
-		(SaHpiBoolT)!(dir);
+		!(dir);
 	
 	set_discrete_sensor_event_state(event, &e->u.hpi_event.event.EventDataUnion.SensorEvent.EventState);
 	e->u.hpi_event.event.EventDataUnion.SensorEvent.PreviousState 
@@ -182,26 +189,28 @@
 					      SaHpiSensorEventT	*e)
 {
 	unsigned int type;
-	
-	type = event->data[10] >> 6;
+	unsigned char *data;
+
+	data = ipmi_event_get_data_ptr(event);
+	type = data[10] >> 6;
 	if (type == EVENT_DATA_1) {
 		e->TriggerReading.ValuesPresent = SAHPI_SRF_RAW;
-		e->TriggerReading.Raw = (SaHpiUint32T)event->data[11];
+		e->TriggerReading.Raw = data[11];
 	}
 	else if (type == EVENT_DATA_2) 
-		e->Oem = (SaHpiUint32T)event->data[11]; 
+		e->Oem = data[11]; 
 	else if (type == EVENT_DATA_3)
-		e->SensorSpecific = (SaHpiUint32T)event->data[11]; 
+		e->SensorSpecific = data[11]; 
 
-	type = (event->data[10] & 0x30) >> 4;
+	type = (data[10] & 0x30) >> 4;
 	if (type == EVENT_DATA_1) {
 		e->TriggerThreshold.ValuesPresent = SAHPI_SRF_RAW;
-		e->TriggerThreshold.Raw = (SaHpiUint32T)event->data[12];
+		e->TriggerThreshold.Raw = data[12];
 	}
 	else if (type == EVENT_DATA_2)
-		e->Oem = (SaHpiUint32T)event->data[12];
+		e->Oem = data[12];
 	else if (type == EVENT_DATA_3)
-		e->SensorSpecific = (SaHpiUint32T)event->data[12];
+		e->SensorSpecific = data[12];
 }
 
 static void sensor_threshold_event(ipmi_sensor_t		*sensor,
@@ -219,8 +228,9 @@
 	ipmi_entity_id_t	entity_id;
 	SaHpiSeverityT		severity;
         SaHpiRptEntryT          *rpt_entry;
+	unsigned char           *data;
 
-      
+        data = ipmi_event_get_data_ptr(event);
         handler    = cb_data;
         entity_id  = ipmi_entity_convert_to_id(ipmi_sensor_get_entity(sensor));
         rpt_entry  = ohoi_get_resource_by_entityid(handler->rptcache, &entity_id);
@@ -239,13 +249,13 @@
 	/* Do not find EventType in IPMI */
 	e->u.hpi_event.event.EventType = SAHPI_ET_SENSOR;
 	e->u.hpi_event.event.Timestamp = (SaHpiTimeT)
-		ipmi_get_uint32(event->data);
+		ipmi_get_uint32(data) * 1000000000;
 
 	e->u.hpi_event.event.EventDataUnion.SensorEvent.SensorNum = 0;
 	e->u.hpi_event.event.EventDataUnion.SensorEvent.SensorType = 
-		(SaHpiSensorTypeT)event->data[7];
+		data[7];
 	e->u.hpi_event.event.EventDataUnion.SensorEvent.EventCategory =
-		(SaHpiEventCategoryT)event->data[9] & 0x7f;
+		data[9] & 0x7f;
 	
 	set_thresholed_sensor_event_state(threshold, dir, high_low,
 			&e->u.hpi_event.event.EventDataUnion.SensorEvent,
--- openhpi-0.6.0/plugins/ipmi/hotswap.c.orig	2004-03-15 02:52:47.000000000 +0100
+++ openhpi-0.6.0/plugins/ipmi/hotswap.c	2004-03-27 14:04:59.154946928 +0100
@@ -81,13 +81,12 @@
 
 static
 int _get_hotswap_state(ipmi_entity_t    *ent,
-                       enum ipmi_hot_swap_states last_state,
-                       enum ipmi_hot_swap_states curr_state,
-                       void                      *cb_data,
-                       ipmi_event_t              *event)
+		       int                       err,
+                       enum ipmi_hot_swap_states state,
+                       void                      *cb_data)
 {
-        *(enum ipmi_hot_swap_states*)cb_data = curr_state;
-        return IPMI_EVENT_NOT_HANDLED;
+        *(enum ipmi_hot_swap_states*)cb_data = state;
+        return 0;
 }
 
 SaErrorT ohoi_get_hotswap_state(void *hnd, SaHpiResourceIdT id, 
