--- openhpi-0.5.0/src/plugins/snmp_client/snmp_client_utils.c.orig	2004-02-22 02:28:11.000000000 +0000
+++ openhpi-0.5.0/src/plugins/snmp_client/snmp_client_utils.c	2004-02-22 03:11:26.000000000 +0000
@@ -72,7 +72,7 @@
 	
 	bulk_pdu->max_repetitions = num_repetitions;
 
-printf("OID LENGTH %d\n", bulk_objid_len);
+printf("OID LENGTH %zd\n", bulk_objid_len);
 printf("Num Repetitions %d\n", num_repetitions);
 printf("OID %d\n", (int)bulk_objid[0]);
 printf("OID %d\n", (int)bulk_objid[1]);
--- openhpi-0.5.0/src/plugins/snmp_client/snmp_client_get_rdrs.c.orig	2004-02-22 02:28:11.000000000 +0000
+++ openhpi-0.5.0/src/plugins/snmp_client/snmp_client_get_rdrs.c	2004-02-22 03:10:15.000000000 +0000
@@ -317,9 +317,8 @@
 			if (vars->type == ASN_OCTET_STR) {
 
 				/* local variables used by case statements */
-				int *data;
+				int data; /* 32-bit */
 				char *repeat;
-				int *stream_data;
 				char *text_info;
 				char *oem_data;
 
@@ -339,18 +338,12 @@
 						ntohl(sahpi_ctr_cap[i].CtrlRec.TypeUnion.Discrete.Default);
 					break;
 				case SAHPI_CTRL_TYPE_ANALOG:
-					data = (int *)vars->val.string;
-					sahpi_ctr_cap[i].CtrlRec.TypeUnion.Analog.Min = *data;		
-					sahpi_ctr_cap[i].CtrlRec.TypeUnion.Analog.Min =
-						ntohl(sahpi_ctr_cap[i].CtrlRec.TypeUnion.Analog.Min);
-					data++;
-					sahpi_ctr_cap[i].CtrlRec.TypeUnion.Analog.Max = *data;
-					sahpi_ctr_cap[i].CtrlRec.TypeUnion.Analog.Max =
-						ntohl(sahpi_ctr_cap[i].CtrlRec.TypeUnion.Analog.Max);
-					data++;
-					sahpi_ctr_cap[i].CtrlRec.TypeUnion.Analog.Default = *data;
-					sahpi_ctr_cap[i].CtrlRec.TypeUnion.Analog.Default = 
-						ntohl(sahpi_ctr_cap[i].CtrlRec.TypeUnion.Analog.Default);
+					memcpy(&data, vars->val.string, sizeof(int));
+					sahpi_ctr_cap[i].CtrlRec.TypeUnion.Analog.Min = ntohl(data);
+					memcpy(&data, vars->val.string + sizeof(int), sizeof(int));
+					sahpi_ctr_cap[i].CtrlRec.TypeUnion.Analog.Max = ntohl(data);
+					memcpy(&data, vars->val.string + 2*sizeof(int), sizeof(int));
+					sahpi_ctr_cap[i].CtrlRec.TypeUnion.Analog.Default = ntohl(data);
 					break;
 				case SAHPI_CTRL_TYPE_STREAM:
 					/* set repeat */
@@ -359,17 +352,16 @@
 					       repeat, 
 					       sizeof(sahpi_ctr_cap[i].CtrlRec.TypeUnion.Stream.Default.Repeat));
 					repeat++;
-					stream_data = (int *)repeat;
 					/* set .StreamLength */
 					memcpy(&sahpi_ctr_cap[i].CtrlRec.TypeUnion.Stream.Default.StreamLength,
-					       stream_data, 
+					       repeat, 
 					       sizeof(sahpi_ctr_cap[i].CtrlRec.TypeUnion.Stream.Default.StreamLength));
 					sahpi_ctr_cap[i].CtrlRec.TypeUnion.Stream.Default.StreamLength = 
 						ntohs(sahpi_ctr_cap[i].CtrlRec.TypeUnion.Stream.Default.StreamLength);
-					stream_data++;
+					repeat += sizeof(int);
 					/* set the .Stream data */
 					memcpy(&sahpi_ctr_cap[i].CtrlRec.TypeUnion.Stream.Default.Stream, 
-					       stream_data, 
+					       repeat, 
 					       SAHPI_CTRL_MAX_STREAM_LENGTH); 
                                               break;
 				case SAHPI_CTRL_TYPE_TEXT:
@@ -751,96 +743,94 @@
 			vars = vars->next_variable;
 		}
 		/* SA_HPI_SENSOR_RANGE_READING_RAW */
-		SaHpiUint32T *raw;
+		SaHpiUint32T raw;
 		for (i = 0; i < get_value.integer; i++) {
 			if (vars->type == ASN_OCTET_STR) {
-				raw = (SaHpiUint32T *)vars->val.string;
+				memcpy(&raw, vars->val.string, sizeof(SaHpiUint32T));
 				/* MAX */
-				sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Max.Raw = 
-					(SaHpiUint32T)*raw++;
-				sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Max.Raw =
-					ntohl(sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Max.Raw);
+				sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Max.Raw = ntohl(raw);
+
 				/* MIN */
-				sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Min.Raw = 
-					(SaHpiUint32T)*raw++;
-				sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Min.Raw =
-					ntohl(sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Min.Raw);
+				memcpy(&raw, vars->val.string + sizeof(SaHpiUint32T), sizeof(SaHpiUint32T));
+				sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Min.Raw = ntohl(raw);
 
 				/* NOMINAL */
-				sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Nominal.Raw = 
-					(SaHpiUint32T)*raw++;
-				sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Nominal.Raw =
-					ntohl(sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Nominal.Raw);
+				memcpy(&raw, vars->val.string + 2*sizeof(SaHpiUint32T), sizeof(SaHpiUint32T));
+				sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Nominal.Raw = ntohl(raw);
 
 				/* NORMAL_MAX */
-				sahpi_sensor_cap[i].SensorRec.DataFormat.Range.NormalMax.Raw = 
-					(SaHpiUint32T)*raw++;
-				sahpi_sensor_cap[i].SensorRec.DataFormat.Range.NormalMax.Raw =
-					ntohl(sahpi_sensor_cap[i].SensorRec.DataFormat.Range.NormalMax.Raw);
+				memcpy(&raw, vars->val.string + 3*sizeof(SaHpiUint32T), sizeof(SaHpiUint32T));
+				sahpi_sensor_cap[i].SensorRec.DataFormat.Range.NormalMax.Raw = ntohl(raw);
 
 				/* NORMAL_MIN */
-				sahpi_sensor_cap[i].SensorRec.DataFormat.Range.NormalMin.Raw = 
-					(SaHpiUint32T)*raw++;
-				sahpi_sensor_cap[i].SensorRec.DataFormat.Range.NormalMin.Raw =
-					ntohl(sahpi_sensor_cap[i].SensorRec.DataFormat.Range.NormalMin.Raw);
+				memcpy(&raw, vars->val.string + 4*sizeof(SaHpiUint32T), sizeof(SaHpiUint32T));
+				sahpi_sensor_cap[i].SensorRec.DataFormat.Range.NormalMin.Raw = ntohl(raw);
 			} else
 				printf("SA_HPI_SENSOR_RANGE_FLAGS:something terrible has happened\n");
 			vars = vars->next_variable;
 		}
 		/* SA_HPI_SENSOR_RANGE_READING_INTERPRETED */
-		SaHpiSensorInterpretedT *interpreted;
+		SaHpiSensorInterpretedT interpreted;
 		for (i = 0; i < get_value.integer; i++) {
 			if (vars->type == ASN_OCTET_STR) {
-				interpreted = (SaHpiSensorInterpretedT *)vars->val.string;
+				memcpy(&interpreted, vars->val.string, sizeof(interpreted));
 				/* MAX */
 				set_interpreted(
 					&sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Max.Interpreted,
-					interpreted++);
+					&interpreted);
 				/* MIN */
+				memcpy(&interpreted, vars->val.string + sizeof(interpreted), sizeof(interpreted));
 				set_interpreted(
 					&sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Min.Interpreted,
-					interpreted++);
+					&interpreted);
 				/* NOMINAL */
+				memcpy(&interpreted, vars->val.string + 2*sizeof(interpreted), sizeof(interpreted));
 				set_interpreted(
 					&sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Nominal.Interpreted,
-					interpreted++);
+					&interpreted);
 
 				/* NOMINAL_MAX */
+				memcpy(&interpreted, vars->val.string + 3*sizeof(interpreted), sizeof(interpreted));
 				set_interpreted(
 					&sahpi_sensor_cap[i].SensorRec.DataFormat.Range.NormalMax.Interpreted,
-					interpreted++);
+					&interpreted);
 
 				/*NOMINAL_MIN */
+				memcpy(&interpreted, vars->val.string + 4*sizeof(interpreted), sizeof(interpreted));
 				set_interpreted(
 					&sahpi_sensor_cap[i].SensorRec.DataFormat.Range.NormalMax.Interpreted,
-					interpreted++);
+					&interpreted);
 
 			} else
 				printf("SA_HPI_SENSOR_RANGE_READING_INTERPRETED:something terrible has happened\n");
 			vars = vars->next_variable;
 		}
 		/* SA_HPI_SENSOR_RANGE_READING_EVENT_SENSOR */
-		SaHpiSensorEvtStatusT *event_status;
+		SaHpiSensorEvtStatusT event_status;
 		for (i = 0; i < get_value.integer; i++) {
 			if (vars->type == ASN_OCTET_STR) {
-				event_status = (SaHpiSensorEvtStatusT *)vars->val.string;
+				memcpy(&event_status, vars->val.string, sizeof(event_status));
 				/* MAX */
 				set_event(&sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Max.EventStatus,
-					  event_status++);
+					  &event_status);
 				/* MIN */
+				memcpy(&event_status, vars->val.string + sizeof(event_status), sizeof(event_status));
 				set_event(&sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Min.EventStatus,
-						event_status++);
+						&event_status);
 				/* NOMINAL */
+				memcpy(&event_status, vars->val.string + 2*sizeof(event_status), sizeof(event_status));
 				set_event(&sahpi_sensor_cap[i].SensorRec.DataFormat.Range.Nominal.EventStatus,
-						event_status++);
+						&event_status);
 
 				/* NOMINAL_MAX */
+				memcpy(&event_status, vars->val.string + 3*sizeof(event_status), sizeof(event_status));
 				set_event(&sahpi_sensor_cap[i].SensorRec.DataFormat.Range.NormalMax.EventStatus,
-						event_status++);
+						&event_status);
 
 				/*NOMINAL_MIN */
+				memcpy(&event_status, vars->val.string + 4*sizeof(event_status), sizeof(event_status));
 				set_event(&sahpi_sensor_cap[i].SensorRec.DataFormat.Range.NormalMax.EventStatus,
-						event_status++);
+						&event_status);
 
 			} else
 				printf("SA_HPI_SENSOR_RANGE_READING_EVENT_SENSOR:something terrible has happened\n");
--- openhpi-0.5.0/src/plugins/dummy/dummy.c.orig	2004-02-04 03:15:11.000000000 +0000
+++ openhpi-0.5.0/src/plugins/dummy/dummy.c	2004-02-22 03:47:54.000000000 +0000
@@ -1355,6 +1355,8 @@
 	return(rval);
 }
 
+#define align(x) (((x) + sizeof(long) - 1) & (-sizeof(long)))
+
 static int dummy_get_inventory_info(void *hnd, SaHpiResourceIdT id,
 				    SaHpiEirIdT num,
 				    SaHpiInventoryDataT *data)
@@ -1386,8 +1388,8 @@
 		memcpy(data, inventory, sizeof(*inventory));
 
 		for (i=0,pos=0; inventory->DataRecords[i]!=NULL; i++) {
-			data->DataRecords[i] = (SaHpiInventDataRecordT *)&inventory->data[pos];
-			pos+=inventory->DataRecords[i]->DataLength+8;
+			data->DataRecords[i] = (SaHpiInventDataRecordT *)(void*)&inventory->data[pos];
+			pos=align(pos + inventory->DataRecords[i]->DataLength+8);
 		}
 
 	}
@@ -1427,9 +1429,9 @@
 		inventory->Validity = data->Validity;
 	
 		for (i=0, pos=0; data->DataRecords[i] != NULL; i++) {
-			inventory->DataRecords[i] = (SaHpiInventDataRecordT *)&inventory->data[pos];
+			inventory->DataRecords[i] = (SaHpiInventDataRecordT *)(void*)&inventory->data[pos];
 			memcpy(inventory->DataRecords[i], data->DataRecords[i], data->DataRecords[i]->DataLength+8);
-			pos+=data->DataRecords[i]->DataLength+8;
+			pos=align(pos + data->DataRecords[i]->DataLength+8);
 		}
 		inventory->DataRecords[i] = NULL;
 	}
--- openhpi-0.5.0/src/plugins/ipmidirect/ipmi.cpp.orig	2004-02-04 03:15:11.000000000 +0000
+++ openhpi-0.5.0/src/plugins/ipmidirect/ipmi.cpp	2004-02-22 13:36:05.000000000 +0000
@@ -908,7 +908,8 @@
           }
 
        memcpy( &lan_addr, ent->h_addr_list[0], ent->h_length );
-       unsigned int a = *(unsigned int *)ent->h_addr_list[0];
+       unsigned int a;
+       memcpy(&a, ent->h_addr_list[0], sizeof(a));
 
        IpmiLog( "Using host at %d.%d.%d.%d.\n",
                 a & 0xff, (a >> 8 ) & 0xff, 
--- openhpi-0.5.0/src/plugins/ipmidirect/ipmi_con_lan.cpp.orig	2004-02-04 10:33:09.000000000 +0000
+++ openhpi-0.5.0/src/plugins/ipmidirect/ipmi_con_lan.cpp	2004-02-22 13:38:00.000000000 +0000
@@ -790,7 +790,7 @@
 
   // Make sure the source IP matches what we expect the other end to
   // be.
-  ipaddr = (struct sockaddr_in *)&ipaddrd;
+  ipaddr = (struct sockaddr_in *)(void*)&ipaddrd;
 
   if (    (ipaddr->sin_port != m_ip_addr.sin_port)
        || (ipaddr->sin_addr.s_addr != m_ip_addr.sin_addr.s_addr) )
--- openhpi-0.5.0/src/plugins/ipmidirect/fru.cpp.orig	2004-02-04 03:15:11.000000000 +0000
+++ openhpi-0.5.0/src/plugins/ipmidirect/fru.cpp	2004-02-22 13:33:42.000000000 +0000
@@ -24,7 +24,7 @@
 static SaHpiTextBufferT *
 SetItem( cIpmiFruRecord *fr, unsigned char *&p, int &s, const char *name )
 {
-  SaHpiTextBufferT *t = (SaHpiTextBufferT *)p;
+  SaHpiTextBufferT *t = (SaHpiTextBufferT *)(void*)p;
   memset( t->Data, 0, SAHPI_MAX_TEXT_BUFFER_LENGTH );
 
   cIpmiFruItem *i = fr->Find( name );
@@ -35,16 +35,25 @@
 
        const cIpmiTextBuffer *b = &i->m_u.m_text_buffer;
 
-       t->DataType = (SaHpiTextTypeT)b->m_type;
-       t->Language = (SaHpiLanguageT)b->m_language;
-       t->DataLength = b->m_len;
+       /* possibly unaligned access - use memcpy */
+       SaHpiTextTypeT tt = (SaHpiTextTypeT)b->m_type;
+       SaHpiLanguageT tl = (SaHpiLanguageT)b->m_language;
+       SaHpiUint8T td = b->m_len;
+       memcpy(&(t->DataType), &tt, sizeof(t->DataType));
+       memcpy(&(t->Language), &tl, sizeof(t->Language));
+       memcpy(&(t->DataLength), &td, sizeof(t->DataLength));
        memcpy( t->Data, b->m_data, b->m_len );
      }
   else
      {
-       t->DataType = SAHPI_TL_TYPE_BINARY;
-       t->Language = SAHPI_LANG_UNDEF;
-       t->DataLength = 0;
+       SaHpiTextTypeT tt = SAHPI_TL_TYPE_BINARY;
+       SaHpiLanguageT tl = SAHPI_LANG_UNDEF;
+       SaHpiUint8T td = 0;
+
+       /* possibly unaligned access - use memcpy */
+       memcpy(&(t->DataType), &tt, sizeof(t->DataType));
+       memcpy(&(t->Language), &tl, sizeof(t->Language));
+       memcpy(&(t->DataLength), &td, sizeof(t->DataLength));
      }
 
   s += sizeof( SaHpiTextBufferT );
@@ -185,28 +194,34 @@
   for( int i = fru->NumRecords() - 1; i >= 0; i-- )
      {
        cIpmiFruRecord *fr = fru->GetRecord( i );
-       SaHpiInventDataRecordT *r = (SaHpiInventDataRecordT *)p;
+       /* possibly unaligned access - use memcpy */
+       SaHpiInventDataRecordT *r = (SaHpiInventDataRecordT *)(void*)p;
+       SaHpiInventDataRecordTypeT rt;
        int s;
 
        if ( !strcmp( fr->m_name, dIpmiFruRecordInternalUseArea ) )
 	  {
 	    s = InternalUseRecord( &r->RecordData.InternalUse, fr );
-	    r->RecordType = SAHPI_INVENT_RECTYPE_INTERNAL_USE;
+	    rt = SAHPI_INVENT_RECTYPE_INTERNAL_USE;
+	    memcpy(&(r->RecordType), &rt, sizeof(r->RecordType));
 	  }
        else if ( !strcmp( fr->m_name, dIpmiFruRecordChassisInfoArea ) )
 	  {
 	    s = ChassisInfoAreaRecord( &r->RecordData.ChassisInfo, fr );
-	    r->RecordType = SAHPI_INVENT_RECTYPE_CHASSIS_INFO;
+	    rt = SAHPI_INVENT_RECTYPE_CHASSIS_INFO;
+	    memcpy(&(r->RecordType), &rt, sizeof(r->RecordType));
 	  }
        else if ( !strcmp( fr->m_name, dIpmiFruRecordBoardInfoArea ) )
 	  {
 	    s = BoradInfoAreaRecord( &r->RecordData.BoardInfo, fr );
-	    r->RecordType = SAHPI_INVENT_RECTYPE_BOARD_INFO;
+	    rt = SAHPI_INVENT_RECTYPE_BOARD_INFO;
+	    memcpy(&(r->RecordType), &rt, sizeof(r->RecordType));
 	  }
        else if ( !strcmp( fr->m_name, dIpmiFruRecordProductInfoArea ) )
 	  {
 	    s = ProductInfoAreaRecord( &r->RecordData.ProductInfo, fr );
-	    r->RecordType = SAHPI_INVENT_RECTYPE_PRODUCT_INFO;
+	    rt = SAHPI_INVENT_RECTYPE_PRODUCT_INFO;
+	    memcpy(&(r->RecordType), &rt, sizeof(r->RecordType));
 	  }
        else if ( !strcmp( fr->m_name, dIpmiFruRecordMultiRecord ) )
 	    continue;
@@ -216,8 +231,9 @@
 	    continue;
           }
 
-       data.DataRecords[idx++] = (SaHpiInventDataRecordT *)p;
-       r->DataLength = s;
+       data.DataRecords[idx++] = (SaHpiInventDataRecordT *)(void*)p;
+       SaHpiUint32T dl = s;
+       memcpy(&(r->DataLength), &dl, sizeof(r->DataLength));
        s += sizeof( SaHpiInventDataRecordT ) - sizeof( SaHpiInventDataUnionT );
        p += s;
        size += s;
@@ -304,7 +320,8 @@
 
   // calulate fru inventory size
   unsigned char *buffer = new unsigned char[1024*128];
-  SaHpiInventoryDataT *d = (SaHpiInventoryDataT *)buffer;
+  /* new will return aligned pointer? */
+  SaHpiInventoryDataT *d = (SaHpiInventoryDataT *)(void*)buffer;
   fru->m_inventory_size = GetInventoryInfo( fru, *d );
   delete [] buffer;
 
@@ -320,7 +337,8 @@
     for( i = 0; i < n; i++ )
          *b++ = (unsigned char)i;
 
-    d = (SaHpiInventoryDataT *)buffer;
+    /* new will return aligned pointer? */
+    d = (SaHpiInventoryDataT *)(void*)buffer;
     unsigned int s = GetInventoryInfo( fru, *d );
 
     assert( s == fru->m_inventory_size );
--- openhpi-0.5.0/util/hpievent.c.orig	2003-07-28 18:21:21.000000000 +0000
+++ openhpi-0.5.0/util/hpievent.c	2004-02-22 13:48:16.000000000 +0000
@@ -333,7 +333,7 @@
           printf("   -z  Display extra debug messages\n");
           exit(1);
   }
-  inv = (SaHpiInventoryDataT *)&inbuff[0];
+  inv = (SaHpiInventoryDataT *)(void*)&inbuff[0];
 
   rv = saHpiInitialize(&hpiVer);
 
--- openhpi-0.5.0/util/hpiinv.c.orig	2004-02-04 03:15:13.000000000 +0000
+++ openhpi-0.5.0/util/hpiinv.c	2004-02-22 13:49:25.000000000 +0000
@@ -269,7 +269,7 @@
 		}
 	}
 
-	inv = (SaHpiInventoryDataT *)&inbuff[0];
+	inv = (SaHpiInventoryDataT *)(void*)&inbuff[0];
 	rv = saHpiInitialize(&hpiVer);
 	if (rv != SA_OK) {
 		printf("saHpiInitialize error %d\n",rv);
--- openhpi-0.5.0/util/hpifru.c.orig	2004-02-04 03:15:13.000000000 +0000
+++ openhpi-0.5.0/util/hpifru.c	2004-02-22 13:48:46.000000000 +0000
@@ -254,7 +254,7 @@
           printf("   -z  Display extra debug messages\n");
           exit(1);
   }
-  inv = (SaHpiInventoryDataT *)&inbuff[0];
+  inv = (SaHpiInventoryDataT *)(void*)&inbuff[0];
   rv = saHpiInitialize(&hpiVer);
   if (rv != SA_OK) {
     printf("saHpiInitialize error %d\n",rv);
--- openhpi-0.5.0/examples/list_resources.c.orig	2004-02-04 16:10:19.000000000 +0000
+++ openhpi-0.5.0/examples/list_resources.c	2004-02-22 13:47:20.000000000 +0000
@@ -477,7 +477,7 @@
                 {
                         l_eirid = rdr.RdrTypeUnion.InventoryRec.EirId;
 
-                        l_inventdata = (SaHpiInventoryDataT *)&inbuff[0];
+                        l_inventdata = (SaHpiInventoryDataT *)(void*)&inbuff[0];
                         err = saHpiEntityInventoryDataRead(session_id, resource_id,
                                                             l_eirid, l_buffersize,
                                                             l_inventdata, &l_actualsize);
